// Prisma Schema for Prism Backend
// Developer Analytics Dashboard

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. Users Table
model User {
  id             String   @id @default(uuid())
  email          String   @unique
  username       String   @unique
  passwordHash   String?  @map("password_hash")
  fullName       String?  @map("full_name")
  avatarUrl      String?  @map("avatar_url")
  bio            String?
  location       String?
  website        String?
  totalPoints    Int      @default(0) @map("total_points")
  currentStreak  Int      @default(0) @map("current_streak")
  longestStreak  Int      @default(0) @map("longest_streak")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  lastActive     DateTime @default(now()) @map("last_active")
  emailVerified  Boolean  @default(false) @map("email_verified")
  isActive       Boolean  @default(true) @map("is_active")

  // Relations
  platformConnections PlatformConnection[]
  githubStats         GithubStat[]
  cpStats             CpStat[]
  tasks               Task[]
  activityHeatmap     ActivityHeatmap[]
  userMissions        UserMission[]
  leaderboard         Leaderboard[]
  portfolios          UserPortfolio[]
  syncJobs            SyncJob[]

  @@map("users")
}

// 2. Platform Connections Table
model PlatformConnection {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  platform         Platform
  platformUserId   String?   @map("platform_user_id")
  platformUsername String?   @map("platform_username")
  accessToken      String?   @map("access_token") // Should be encrypted in production
  refreshToken     String?   @map("refresh_token") // Should be encrypted in production
  tokenExpiresAt   DateTime? @map("token_expires_at")
  isActive         Boolean   @default(true) @map("is_active")
  lastSynced       DateTime? @map("last_synced")
  syncStatus       SyncStatus @default(PENDING) @map("sync_status")
  metadata         Json?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  githubStats GithubStat[]
  cpStats     CpStat[]

  @@unique([userId, platform, platformUsername])
  @@index([userId, platform])
  @@map("platform_connections")
}

// 3. GitHub Stats Table
model GithubStat {
  id                 String   @id @default(uuid())
  connectionId       String   @map("connection_id")
  userId             String   @map("user_id")
  date               DateTime @db.Date
  commits            Int      @default(0)
  pullRequests       Int      @default(0) @map("pull_requests")
  issues             Int      @default(0)
  reviews            Int      @default(0)
  starsReceived      Int      @default(0) @map("stars_received")
  followersCount     Int?     @map("followers_count")
  followingCount     Int?     @map("following_count")
  publicRepos        Int?     @map("public_repos")
  totalContributions Int?     @map("total_contributions")
  languages          Json?
  repositories       Json?
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  connection PlatformConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([connectionId, date])
  @@index([userId, date])
  @@map("github_stats")
}

// 4. Competitive Programming Stats Table
model CpStat {
  id                   String   @id @default(uuid())
  connectionId         String   @map("connection_id")
  userId               String   @map("user_id")
  platform             CpPlatform
  date                 DateTime @db.Date
  problemsSolved       Int      @default(0) @map("problems_solved")
  easySolved           Int      @default(0) @map("easy_solved")
  mediumSolved         Int      @default(0) @map("medium_solved")
  hardSolved           Int      @default(0) @map("hard_solved")
  contestsParticipated Int      @default(0) @map("contests_participated")
  rating               Int?
  ranking              Int?
  acceptanceRate       Decimal? @db.Decimal(5, 2) @map("acceptance_rate")
  totalProblemsSolved  Int?     @map("total_problems_solved")
  problemsDetail       Json?    @map("problems_detail")
  createdAt            DateTime @default(now()) @map("created_at")

  // Relations
  connection PlatformConnection @relation(fields: [connectionId], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([connectionId, date])
  @@index([userId, platform, date])
  @@map("cp_stats")
}

// 5. Tasks Table
model Task {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  source         TaskSource
  sourceId       String?      @map("source_id")
  title          String
  description    String?
  status         TaskStatus   @default(TODO)
  priority       TaskPriority @default(MEDIUM)
  dueDate        DateTime?    @map("due_date")
  completedAt    DateTime?    @map("completed_at")
  tags           String[]
  assignee       String?
  projectName    String?      @map("project_name")
  estimatedHours Decimal?     @db.Decimal(5, 2) @map("estimated_hours")
  actualHours    Decimal?     @db.Decimal(5, 2) @map("actual_hours")
  metadata       Json?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, dueDate])
  @@map("tasks")
}

// 6. Activity Heatmap Table
model ActivityHeatmap {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  date             DateTime @unique @db.Date
  activityScore    Int      @default(0) @map("activity_score")
  githubCommits    Int      @default(0) @map("github_commits")
  problemsSolved   Int      @default(0) @map("problems_solved")
  tasksCompleted   Int      @default(0) @map("tasks_completed")
  calendarEvents   Int      @default(0) @map("calendar_events")
  totalActivities  Int      @default(0) @map("total_activities")
  metadata         Json?
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@map("activity_heatmap")
}

// 7. Missions Table
model Mission {
  id           String       @id @default(uuid())
  title        String
  description  String?
  type         MissionType
  category     MissionCategory
  points       Int
  requirements Json
  isActive     Boolean      @default(true) @map("is_active")
  startDate    DateTime?    @db.Date @map("start_date")
  endDate      DateTime?    @db.Date @map("end_date")
  createdAt    DateTime     @default(now()) @map("created_at")

  // Relations
  userMissions UserMission[]

  @@index([type, isActive])
  @@map("missions")
}

// 8. User Missions Table
model UserMission {
  id           String              @id @default(uuid())
  userId       String              @map("user_id")
  missionId    String              @map("mission_id")
  status       UserMissionStatus   @default(ASSIGNED)
  progress     Json?
  completedAt  DateTime?           @map("completed_at")
  pointsEarned Int                 @default(0) @map("points_earned")
  assignedAt   DateTime            @default(now()) @map("assigned_at")
  expiresAt    DateTime?           @map("expires_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission Mission @relation(fields: [missionId], references: [id], onDelete: Cascade)

  @@unique([userId, missionId])
  @@index([userId, status])
  @@map("user_missions")
}

// 9. Leaderboard Table
model Leaderboard {
  id                String            @id @default(uuid())
  userId            String            @map("user_id")
  period            LeaderboardPeriod
  points            Int               @default(0)
  rank              Int?
  commitsCount      Int               @default(0) @map("commits_count")
  problemsSolved    Int               @default(0) @map("problems_solved")
  tasksCompleted    Int               @default(0) @map("tasks_completed")
  missionsCompleted Int               @default(0) @map("missions_completed")
  streakDays        Int               @default(0) @map("streak_days")
  calculatedAt      DateTime          @default(now()) @map("calculated_at")
  createdAt         DateTime          @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, period, calculatedAt])
  @@index([period, points])
  @@map("leaderboard")
}

// 10. Portfolio Templates Table
model PortfolioTemplate {
  id             String   @id @default(uuid())
  name           String
  description    String?
  thumbnailUrl   String?  @map("thumbnail_url")
  templateConfig Json     @map("template_config")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  portfolios UserPortfolio[]

  @@map("portfolio_templates")
}

// 11. User Portfolios Table
model UserPortfolio {
  id               String            @id @default(uuid())
  userId           String            @map("user_id")
  templateId       String            @map("template_id")
  subdomain        String?           @unique
  customDomain     String?           @unique @map("custom_domain")
  config           Json?
  themeSettings    Json?             @map("theme_settings")
  isPublished      Boolean           @default(false) @map("is_published")
  publishedAt      DateTime?         @map("published_at")
  lastDeployed     DateTime?         @map("last_deployed")
  deploymentStatus DeploymentStatus  @default(PENDING) @map("deployment_status")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  // Relations
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  template PortfolioTemplate @relation(fields: [templateId], references: [id])

  @@index([userId])
  @@map("user_portfolios")
}

// 12. Sync Jobs Table
model SyncJob {
  id           String       @id @default(uuid())
  userId       String       @map("user_id")
  platform     String
  jobType      SyncJobType  @map("job_type")
  status       SyncStatus
  startedAt    DateTime?    @map("started_at")
  completedAt  DateTime?    @map("completed_at")
  errorMessage String?      @map("error_message")
  metadata     Json?
  createdAt    DateTime     @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, platform, status])
  @@map("sync_jobs")
}

// Enums
enum Platform {
  GITHUB
  LEETCODE
  CODEFORCES
  GOOGLE_CALENDAR
  MS_CALENDAR
  OPENPROJECT
  SLACK
}

enum CpPlatform {
  LEETCODE
  CODEFORCES
}

enum SyncStatus {
  PENDING
  SYNCING
  COMPLETED
  FAILED
}

enum TaskSource {
  OPENPROJECT
  GOOGLE_CALENDAR
  MS_CALENDAR
  SLACK
  MANUAL
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MissionType {
  DAILY
  WEEKLY
}

enum MissionCategory {
  CODING
  COMMITS
  TASKS
  STREAK
  MIXED
}

enum UserMissionStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum LeaderboardPeriod {
  DAILY
  WEEKLY
  MONTHLY
  ALL_TIME
}

enum DeploymentStatus {
  PENDING
  DEPLOYING
  DEPLOYED
  FAILED
}

enum SyncJobType {
  FULL_SYNC
  INCREMENTAL_SYNC
  STATS_CALCULATION
}
